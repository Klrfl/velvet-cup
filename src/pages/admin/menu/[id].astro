---
import AdminLayout from "@/layouts/AdminLayout.astro"
import MenuEdit from "@/components/MenuEdit.vue"

import { formatDate } from "@/lib/utils"
import { db } from "@/database"
import { jsonArrayFrom } from "kysely/helpers/postgres"
import { sql } from "kysely"

import CategoryServiceImpl from "@/lib/services/category"
import KyselyMenuServiceFactory from "@/lib/factories/menu.factory"

const { id } = Astro.params

const menuId = Number(id)
if (!id || isNaN(menuId)) {
	return Astro.rewrite("/404")
}

const menuService = new KyselyMenuServiceFactory().createService()
const menu = await menuService.getAdminMenu(menuId)

if (!menu) {
	return Astro.rewrite("/404")
}

const variants = await db
	.selectFrom("menu_variants as mv")
	.select((eb) => [
		"mv.id",
		"mv.name",
		"mv.price",
		jsonArrayFrom(
			eb
				.selectFrom("menu_variant_options as mvo")
				.leftJoin("menu_option_values as mov", "mov.id", "mvo.option_value_id")
				.leftJoin("menu_options as mo", "mo.id", "mov.menu_option_id")
				.whereRef("mvo.variant_id", "=", "mv.id")
				.select((eb) => [
					"option_value_id",
					eb.fn.coalesce("mov.name", sql<string>`''`).as("option_value"),
					eb.fn.coalesce("mo.name", sql<string>`''`).as("option_name"),
				])
		).as("options"),
	])
	.where("mv.menu_id", "=", Number(id))
	.execute()

const categoryService = new CategoryServiceImpl()
const categories = await categoryService.getCategories()
---

<AdminLayout>
	<header class="bleed-section">
		<h1 class="text-lg">Edit "{menu.name}"</h1>

		<p>Created at {formatDate(new Date(menu.created_at))}</p>
	</header>

	<section class="bleed-section app-section grid md:grid-cols-6 gap-4">
		<MenuEdit
			menu={menu}
			variants={variants}
			categories={categories}
			client:load
		/>
	</section>
</AdminLayout>
