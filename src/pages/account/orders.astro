---
import Layout from "@/layouts/Layout.astro"
import OrderItem from "@/components/order/OrderItem.astro"

import { db } from "@/database/"
import { auth } from "@/lib/auth"
import { jsonArrayFrom } from "kysely/helpers/postgres"

const session = await auth.api.getSession({
	headers: Astro.request.headers,
})

if (!session) {
	return Astro.redirect("/")
}

const orders = await db
	.selectFrom("orders")
	.leftJoin("order_status as os", "os.id", "orders.status_id")
	.select((eb) => [
		"orders.id",
		"orders.status_id",
		"orders.created_at",
		"os.name as status",
		jsonArrayFrom(
			eb
				.selectFrom("order_detail as od")
				.leftJoin("menu as m", "m.id", "od.menu_id")
				.select(["m.name as menu_name", "od.quantity", "od.price"])
				.whereRef("od.order_id", "=", "orders.id")
		).as("details"),
	])
	.where("user_id", "=", session.user.id)
	.orderBy("orders.created_at desc")
	.execute()
---

<Layout>
	<header class="bleed-section">
		<h1 class="text-4xl">Your orders</h1>
	</header>

	<section class="main-section">
		<ul class="grid gap-4">
			{orders.map((order) => <OrderItem {order} />)}
		</ul>
	</section>
</Layout>
